-- ph... SQLINES DEMO ***
-- ve... SQLINES DEMO ***
-- SQLINES DEMO *** admin.net/
--
-- SQLINES DEMO *** 0.1:3306
-- SQLINES DEMO *** 20 Oca 2024, 09:10:21
-- SQLINES DEMO ***  8.0.31
-- SQLINES DEMO *** 0.26

/* SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO"; */



/* SQLINES DEMO *** ARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/* SQLINES DEMO *** ARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/* SQLINES DEMO *** LLATION_CONNECTION=@@COLLATION_CONNECTION */;
/* SQLINES DEMO *** tf8mb4 */;

--
-- SQLINES DEMO *** u_app`
--

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO ***  yapısı `menu_elements`
--

DROP TABLE IF EXISTS menu_elements;
-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE IF NOT EXISTS menu_elements (
  id int NOT NULL GENERATED ALWAYS AS IDENTITY,
  name varchar(25) NOT NULL,
  description varchar(255) DEFAULT NULL,
  category varchar(25) DEFAULT NULL,
  price double precision NOT NULL,
  photo varchar(255) DEFAULT NULL,
  restaurant_id int NOT NULL,
  PRIMARY KEY (id)
) ;

CREATE INDEX menu_elements_restaurant_id_fkey ON menu_elements (restaurant_id);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO ***  yapısı `reservations`
--

DROP TABLE IF EXISTS reservations;
-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE IF NOT EXISTS reservations (
  id int NOT NULL GENERATED ALWAYS AS IDENTITY,
  restaurant_id int NOT NULL,
  waiter_id int NOT NULL,
  user_id int NOT NULL,
  persons int NOT NULL DEFAULT '1',
  status int NOT NULL DEFAULT '0',
  reservation_date timestamp(3) NOT NULL,
  reservation_hour timestamp(3) NOT NULL,
  reservation_status int NOT NULL,
  PRIMARY KEY (id)
) ;

CREATE INDEX reservations_restaurant_id_fkey ON reservations (restaurant_id);
CREATE INDEX reservations_waiter_id_fkey ON reservations (waiter_id);
CREATE INDEX reservations_user_id_fkey ON reservations (user_id);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO ***  yapısı `restaurants`
--

DROP TABLE IF EXISTS restaurants;
-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE IF NOT EXISTS restaurants (
  id int NOT NULL GENERATED ALWAYS AS IDENTITY,
  name varchar(25) NOT NULL,
  photo varchar(255) DEFAULT NULL,
  description varchar(255) DEFAULT NULL,
  address varchar(255) DEFAULT NULL,
  legal_name varchar(25) NOT NULL,
  menu_description varchar(255) DEFAULT NULL,
  PRIMARY KEY (id)
) ;

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO ***  yapısı `reviews`
--

DROP TABLE IF EXISTS reviews;
-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE IF NOT EXISTS reviews (
  id int NOT NULL GENERATED ALWAYS AS IDENTITY,
  comment varchar(255) DEFAULT NULL,
  rating int NOT NULL DEFAULT '0',
  reservation_id int NOT NULL,
  PRIMARY KEY (id)
) ;

CREATE INDEX reviews_reservation_id_fkey ON reviews (reservation_id);

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO ***  yapısı `users`
--

DROP TABLE IF EXISTS users;
-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE IF NOT EXISTS users (
  id int NOT NULL GENERATED ALWAYS AS IDENTITY,
  name varchar(25) NOT NULL,
  surname varchar(25) NOT NULL,
  password varchar(20) NOT NULL,
  mobile_phone_number varchar(20) NOT NULL,
  gender int DEFAULT NULL,
  PRIMARY KEY (id),
  CONSTRAINT users_mobile_phone_number_key UNIQUE  (mobile_phone_number)
) ;

-- SQLINES DEMO *** ---------------------------------------

--
-- SQLINES DEMO ***  yapısı `waiters`
--

DROP TABLE IF EXISTS waiters;
-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE TABLE IF NOT EXISTS waiters (
  id int NOT NULL GENERATED ALWAYS AS IDENTITY,
  name varchar(25) NOT NULL,
  surname varchar(25) NOT NULL,
  restaurant_id int NOT NULL,
  PRIMARY KEY (id)
) ;

CREATE INDEX waiters_restaurant_id_fkey ON waiters (restaurant_id);

--
-- SQLINES DEMO *** ış tablolar için kısıtlamalar
--

--
-- SQLINES DEMO *** ları `menu_elements`
--
ALTER TABLE menu_elements
  ADD CONSTRAINT menu_elements_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE RESTRICT ON UPDATE CASCADE;

--
-- SQLINES DEMO *** ları `reservations`
--
ALTER TABLE reservations
  ADD CONSTRAINT reservations_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE RESTRICT ON UPDATE CASCADE,
  ADD CONSTRAINT reservations_user_id_fkey FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE RESTRICT ON UPDATE CASCADE,
  ADD CONSTRAINT reservations_waiter_id_fkey FOREIGN KEY (waiter_id) REFERENCES waiters (id) ON DELETE RESTRICT ON UPDATE CASCADE;

--
-- SQLINES DEMO *** ları `reviews`
--
ALTER TABLE reviews
  ADD CONSTRAINT reviews_reservation_id_fkey FOREIGN KEY (reservation_id) REFERENCES reservations (id) ON DELETE RESTRICT ON UPDATE CASCADE;

--
-- SQLINES DEMO *** ları `waiters`
--
ALTER TABLE waiters
  ADD CONSTRAINT waiters_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE RESTRICT ON UPDATE CASCADE;
COMMIT;

/* SQLINES DEMO *** ER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/* SQLINES DEMO *** ER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/* SQLINES DEMO *** ON_CONNECTION=@OLD_COLLATION_CONNECTION */;
